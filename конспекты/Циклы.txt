Циклы используются для повторения каких либо действий несколько раз.
Для каждого цикла нужно сформулировать условие: в каком случае нам нужно выполнять тело цикла.
Итерация цикла - одно повторение тела цикла.
В разных языках программирования циклы оформляются похожим образом.

while() { //Условие продолжения работы
	//Выполняемые действия
}

На практике циклы используются для:
* перебора значений в каком то интервале. Например от A до B.
* выполнения какого то действия N раз.
* агрегирования данных
* моделирования процессов
В любом случае потребуется дополнительная переменная - счетчик.
Обычно счетчики называются i, j.

Пример перебора значений в интервале от A до B (A <= B).
Счетчик хранит перебираемое значение.
int i = a; //В счетчик нужно записать начало интервала
while(i < b) {// Цикл нужно выполнять пока счетчик в пределах интервала
	// Действия для каждого значения i
	i = i + 1; // Переход к следующему числу интервала
}

Перебирать значения можно в прямом порядке (от A до B) и в обратном порядке (от B до A).
Пример перебора значений в интервале от A до B (A <= B) в обратном порядке.
int i = b; //В счетчик нужно записать _конец_ интервала
while(i >= a) {// Цикл нужно выполнять пока счетчик в пределах интервала
	// Действия для каждого значения i
	i = i - 1; // Переход к _предыдущему_ числу интервала
}

Пример выполнения действия N раз.
Счетчик значит "сколько раз действие было сделано".
int i = 0; //Пока цикл не начал работу, действие не было сделано ни разу
while(i < n) { //Цикл нужно выполнять пока действие не будет сделано n раз
	//Выполняемые действия
	i = i + 1; //Действие сделано на 1 раз больше
}

Запись "i = i + 1" можно оформлять по другому:
* i += 1;
* i++;


Агрегирование данных это вычисление результата по множеству данных.
Простейшие методы агрегирования данных:
* Подсчет количества
* Вычисление суммы
* Нахождение среднего арифметического
* Нахождение максимального
* Нахождение минимального
Алгоритмы агрегирования будут рассмотрены отдельно.

Моделирование процессов
Задача - сделать имитацию процесса, который достигает какого-то результата.
Процесс достижения результата нужно разбить на отдельные шаги.
Условие продолжения работы должно проверять: был ли достигнут результат.
Если результат не был достигнут, то работа процесса продолжается.

Циклы могут содержать внутри себя условия.
int i = a;
while (i < b) {
	if (i % 3 == 0) {
		//Действия для значений i, которые кратны 3
	}
	i++;
}
Счетчик должен увеличиваться каждую итерацию цикла.
При ошибке может получиться цикл, который будет работать бесконечно.

Циклы с проверкой флага - частный случай циклов с условием.
Флаги используются если нужно знать: происходило ли какое-то событие или нет.
Флаги делят ход программы на две части:
* До того, как событие произошло
* после того, как событие произошло
В каждом случае программа должна выполнить разные действия.
Чтобы отличить один случай от другого, используются условия.
bool flag = false;

while(process_running) { //Пока программа работает
	if(flag == false) { //Если событие еще не произошло
		//Выполняем действия "до того как событие произошло"
		
		if (){ //Определяем: произошло ли событие
			flag = true; //Отмечаем, что событие произошло
		}
	} else {
		//Выполняем действия "после того, как событие произошло"
	}
}

Циклы могут содержать внутри себя другие циклы.
У внешних и у внутренних циклов должны быть разные счетчики.
Пример перебора значений от X1 до X2 (X1 <= X2) и от Y1 до Y2 (Y1 <= Y2)
int i = x1;
while (i < x2) {
	// Действия для каждого значения i
	int j = y1;
	while (j < y2) {
		//Действия для всех комбинаций i и j
		j++; //Переход к следующему значению j
	}
	i++; // Переход к следующему значению i
}
Если использовать один и тот же счетчик для внешнего и внутреннего цикла, то получатся 