package root.tasks.internal_state;

import root.tasks.LayoutMaker;

public class TaskJava9914 extends LayoutMaker {
    @Override
    protected void makeLayout() {
        appendHeader();
        appendSubheading("Реализуйте НЕстатический метод для решения задачи " + linkToTask(6589));
        appendOrderedNonEscaped(
                "Убедитесь, что у класса Range объявлены поля для целочисленных значений \"from\" и \"to\".",
                "Метод intersects принимает в качестве аргумента 2 целых числа и возвращает логическое значение.",
                "В теле метода нужно вернуть результат решения задачи. Для вычисления результата нужно использовать поля класса и значения из аргументов.",
                "В случае вызова метода у некорректного интервала, нужно выбросить ислючение IllegalStateException.",
                "В случае передачи в качестве аргумента некорректных значений интервала, нужно выбросить исключение IllegalArgumentException."
        );
        appendSubheading("Проверьте корректность работы метода с помощью юнит-теста");
        appendOrderedNonEscaped(
                "В классе RangeSuite создайте юнит-тест intersectsIntsTest.",
                "В теле метода intersectsIntsTest создайте переменную red типа Range и инициализируйте ее экземпляром класса Range.",
                "Для каждой строки тестовых данных из задачи напишите в теле юнит-теста фрагмент кода:",
                "Инициализируйте поля \"from\" и \"to\" переменной red значениями redA и redB.",
                "Вызовите метод intersects у экземпляра класса Range из переменной red.",
                "Передайте ему в качестве аргументов значения greenA, greenB.",
                "Добавьте выражение для проверки результата вызова метода intersects.",
                "После запуска тестового метода, он должен быть отмечен зеленым знаком в списке методов."
        );
        appendSubheading("Проверьте юнит-тестами, что метод выбрасывает ислючение при некорректных данных");
        appendOrderedNonEscaped(
                "В классе RangeSuite создайте юнит-теста intersectsIntWrongRedTest, который проверяет возникновение исключения IllegalStateException, и юнит-тест intersectsIntWrongRightTest, который проверяет возникновение исключения IllegalArgumentException.",
                "В теле метода intersectsIntWrongRedTest инициализируйте экземпляра класса Range.",
                "Заполните значения его полей так, чтобы этот экземпляр получился некорректным.",
                "Вызовите у экземпляра класса метод intersects и передайте ему в качестве аргументов корректные значения интервала.",
                "В теле метода intersectsIntWrongRightTest проверьте что метод hasIntersection выбрасывает исключение IllegalArgumentException в случае, когда экземпляр класса корректный, а переданные аргументы - нет.",
                "После запуска тестовых методов, они должны быть отмечены зеленым знаком в списке методов."
        );
        appendFooter();
    }
}
