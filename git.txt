Подготовка
- Скачать git (https://git-scm.com/downloads)
- Скачать tortoise git (https://tortoisegit.org/download/)
- Создать учетную запись на github (https://github.com/)
- Создать основной репозиторий
Репозиторий - место для хранения текущей версии файлов и каталогов, а также для хранения всей истории их изменения.
- Создать папку на своем компьютере "под контролем"
- Скопировать основной репозиторий в папку
Основной репозиторий находится не на компьютере, а в интернете. Поэтому используем не простое копирование, а "Git Clone" на папке "под контролем".
В папке "под контролем" появится еще одна папка - локальная копия репозитория.
Локальная копия репозитория отличается от обычной папки тем, что содержит в себе скрытую папку ".git".
Папка ".git" содержит историю изменений файлов репозитория.
Там, где будет лежать ".git" со всем ее содержимым - там и будет локальная копия репозитория.

Основные действия с локальным репозиторием:
- Фиксирование изменений - коммит
- Исключение файлов из контроля - игнор
- Просмотр изменений - дифф, блейм
- Отбрасывание изменений - реверт
- Сохранение коммитов в основной репозиторий - пуш
- Обновление локального репозитория - пулл
- Переход к нужному состоянию - чекаут
- Слияние изменений - мерж

Работа в команде:
- Создание ветки
- Создание пулл реквеста
- Создание патча

Фиксирование изменений
Изменения бывают трех типов:
* Добавление файла
* Изменение файла
* Удаление файла
Коммит - набор изменений в файлах репозитория.
Перемещение файла это по смыслу удаление его в одном месте и добавление в другом.
Добавление папки не фиксируется.
Порядок действий:
* на папке с локальным репозиторием нужно щелкнуть ПКМ, а затем "Git Commit"
* Откроется окошко коммита. В нем нужно:
	- Кратко описать суть изменений в большом поле "Message"
	- Отметить все файлы, изменения в которых нужно включить в коммит
	- Нажать кнопку "OK"
* Откроется окошко с результатами сохранения.
После этих действий будет оформлен коммит в локальном репозитории.

Исключение файлов
Исключать файлы бывает нужно когда вы разрабатываете программу в какой-нибудь среде разработки.
У вас при этом получается много файлов с промежуточными результатами компиляции проекта.
Сохранять их в репозитории - бессмысленно, но они будут появляться в списке измененных файлов при коммите.
Игнорировать можно:
* файлы по названию
* файлы по шаблону
* папку вместе со всем ее содержимым
Порядок действий для игнорирования не контролируемого файла useless.txt:
- Щелкаем по файлу ПКМ -> "TortoiseGit" -> "Add to ignore list" -> "useless.txt"
Порядок действий для игнорирования файла под контролем "obsolete.txt":
- Щелкаем по файлу ПКМ -> "TortoiseGit" -> "Delete and add to ignore list" -> "obsolete.txt"
Порядок действий для игнорирования папки UselessFolder:
- Щелкаем по папке ПКМ -> "TortoiseGit" -> "Add to ignore list" -> "UselessFolder"
После этих действий появится диалог подробностей игнорирования. В нем есть две опции.
* Опция "Ignore Type"
	- "Ignore item(s) only in the containing folder(s)" добавит в список игнорирования файлы, которые находятся непосредственно в самой папке.
	- "Ignore item(s) recursively" добавит файлы в папке, а также во всех вложенных папках
* Опция "Ignore File" отвечает за способ оформления списка игнорирования.
Файл списка игнорирования называется ".gitignore", он содержит текст и его можно поместить под контроль версий.
Списков может быть несколько в разных папках репозитория.
В нем пишутся относительные пути к файлам и папкам, которые нужно игнорировать.
Каждая запись на новой строчке.
Список игнорирования можно изменять вручную любым текстовым редактором.
Если нужно вручную добавить в список файл под контролем версий, этот файл сначала нужно удалить.
Удаление файла и изменение списка должно попасть в коммит.

Просмотр изменений
Изменения можно смотреть по отдельному файлу или по целому проекту.
Порядок действий для просмотра изменений:
* Щелкнуть ПКМ и выбрать "TortoiseGit" -> "Show log".
* Откроется лог изменений.
Лог разделен на три части:
- Список коммитов. Находится в верхней части окна
	Для отдельного файла список содержит только те коммиты, в которых он менялся.
	Для папки лог будет содержать только те коммиты, в которых менялись содержащиеся в ней файлы.
- Описание коммита - словесное описание изменений, которое было указано при фиксации. Находится в центре.
- Список файлов, которые изменились в коммите. При просмотре изменений отдельного файла, он будет подсвечен ярким текстом, а остальные - серым.
При двойном щелчке по файлу в списке, откроется его дифф.
Дифф файла - наглядное представление изменений, произошедших в файле.
Окно диффа разделено на две части. В левой части находится старая версия, а в правой - новая.
Если в новой версии строчка добавилась, то справа она будет подсвечена желтым, а слева напротив нее будет серая пустая строчка.
Если в новой версии строчка удалилась, то справа на ее месте будет пустая серая строчка, а слева напротив - оранжевая.
Если нужно узнать: кто и когда последний раз менял конкретную строчку существующего файла, то нужно использовать Блейм. ПКМ на файле -> "TortoiseGit" -> "Blame".
Откроется специальное окошко, в котором будет текст на момент последней фиксации. Внесенные изменения не будут отображены.
В верхней части окошка будет находиться таблица с колонками:
- Хеш коммита - уникальный номер коммита
- Имя разработчика, сделавшего изменение
- Номер строчки
- Текст строчки
В нижней части окошка будет находится список коммитов, связанных с файлом.

Обновление локального репозитория
Если вы работаете не один или занимаетесь своим маленьким проектом и дома, и в офисе, то это должно быть первым вашим действием.
Вы можете сделать изменения дома, зафиксировать и запушить их.
В офисе у вас останется та версия, на которой вы остановились в прошлый раз.
Чтобы продолжить работу в офисе, вам нужно обновить локальный офисный репозиторий.
Порядок действий:
* На папке с локальным репозиторием нужно щелкнуть ПКМ, затем Git Sync.
* Откроется окошко синхронизации гит
	- В поле "Local Branch" и "Remote Branch" должно быть "master"
	- В поле "Remote URL" должно быть "origin"
* Нажать кнопку "Pull"
* Если в удаленном репозитории есть новые коммиты, то они скачаются и отобразятся в списке "In Commits".
	Текущее состояние будет выделено жирным шрифтом
* Если новых коммитов нет (локальный репозиторий не отличается от основного), то отобразится список веток "Ref List".

